name: Auto-Fix Lint Issues

on:
  push:
    branches: [ main, develop ]
  pull_request:
    types: [ opened, synchronize ]
  workflow_dispatch:
    inputs:
      force_fix:
        description: 'Force fix all issues (use with caution)'
        required: false
        default: false
        type: boolean
  schedule:
    # Run daily at 3 AM UTC
    - cron: '0 3 * * *'

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  PYTHON_VERSION: '3.11'

jobs:
  ruff-auto-fix:
    name: Ruff Auto-Fix
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install ruff
    
    - name: Check current lint issues
      id: check_issues
      run: |
        # Count total issues before fix
        TOTAL_ISSUES=$(ruff check . --output-format=concise 2>&1 | grep -c "^" || echo "0")
        echo "total_issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
        
        # Count fixable issues - ensure proper formatting
        ruff check . --fix --diff > fix_diff.txt 2>&1 || true
        FIXABLE_ISSUES=$(grep -c "^+" fix_diff.txt 2>/dev/null || echo "0")
        echo "fixable_issues=${FIXABLE_ISSUES}" >> $GITHUB_OUTPUT
        
        # Output stats with explicit formatting to avoid GitHub Actions format issues
        printf "Found %s total issues, %s are auto-fixable\n" "$TOTAL_ISSUES" "$FIXABLE_ISSUES"
    
    - name: Auto-fix with Ruff
      if: steps.check_issues.outputs.fixable_issues != '0'
      run: |
        # Apply auto-fixes
        ruff check . --fix --unsafe-fixes
        ruff format .
        
        # Check remaining issues
        REMAINING_ISSUES=$(ruff check . --output-format=concise 2>&1 | grep -c "^" || echo "0")
        echo "Fixed $((${{ steps.check_issues.outputs.total_issues }} - $REMAINING_ISSUES)) issues automatically"
        echo "remaining_issues=$REMAINING_ISSUES" >> $GITHUB_ENV
    
    - name: Create Pull Request for Auto-fixes
      if: steps.check_issues.outputs.fixable_issues != '0'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "🔧 Auto-fix lint issues with Ruff"
        title: "[Auto] Fix lint issues with Ruff"
        body: |
          ## 🤖 Automated Lint Fixes
          
          This PR was automatically generated to fix lint issues detected by Ruff.
          
          ### 📊 Statistics
          - **Total issues found**: ${{ steps.check_issues.outputs.total_issues }}
          - **Issues auto-fixed**: ${{ steps.check_issues.outputs.fixable_issues }}
          - **Remaining issues**: ${{ env.remaining_issues || '0' }}
          
          ### ✅ Fixed Categories
          - Import sorting and formatting
          - Whitespace and blank line issues
          - Unused imports removal
          - Line ending corrections
          - Code formatting improvements
          
          ### 🔍 Review Checklist
          - [ ] Review the automated changes
          - [ ] Ensure tests still pass
          - [ ] Check for any unintended side effects
          
          ---
          *Generated by the lint auto-fix workflow*
        branch: auto-fix/ruff-lint-fixes
        delete-branch: true
        labels: |
          automated
          lint-fix
          ruff

  aider-lint-fix:
    name: Aider AI-Powered Lint Fix
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: ruff-auto-fix
    if: always()
    container:
      image: quay.io/takinosh/aider-lint-fixer:latest
      options: --user root
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Git for container
      run: |
        git config --global --add safe.directory /__w/character-music-mcp/character-music-mcp
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
    
    - name: Detect Python environment
      id: detect_env
      run: |
        # Check if we have a virtual environment
        if [ -d ".venv" ]; then
          echo "venv_path=.venv" >> $GITHUB_OUTPUT
        elif [ -d "venv" ]; then
          echo "venv_path=venv" >> $GITHUB_OUTPUT
        else
          echo "venv_path=" >> $GITHUB_OUTPUT
        fi
        
        # Detect Python version from pyproject.toml or setup.py
        if [ -f "pyproject.toml" ]; then
          PYTHON_VERSION=$(grep -E "requires-python" pyproject.toml | grep -oE "[0-9]+\.[0-9]+" | head -1)
          echo "python_version=${PYTHON_VERSION:-3.11}" >> $GITHUB_OUTPUT
        else
          echo "python_version=3.11" >> $GITHUB_OUTPUT
        fi
    
    - name: Install Python linters
      run: |
        pip install --upgrade pip
        pip install flake8 pylint black isort mypy ruff
        
        # Install project dependencies if requirements.txt exists
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt || true
        fi
        
        # Install from pyproject.toml if it exists
        if [ -f "pyproject.toml" ]; then
          pip install -e . || true
        fi
    
    - name: Run aider-lint-fixer analysis
      id: aider_analysis
      env:
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        AIDER_MODEL: deepseek/deepseek-coder
        AIDER_CHAT_LANGUAGE: en
        FORCE_FIX: ${{ github.event.inputs.force_fix || 'false' }}
      run: |
        # Set up environment
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        
        # Run aider-lint-fixer with appropriate options
        if [ "$FORCE_FIX" = "true" ]; then
          echo "Running in force mode..."
          aider-lint-fixer \
            --linters flake8,pylint,ruff \
            --profile strict \
            --force \
            --max-errors 50 \
            . 2>&1 | tee aider_output.log
        else
          echo "Running in normal mode..."
          aider-lint-fixer \
            --linters flake8,pylint,ruff \
            --profile basic \
            --yes \
            --max-errors 20 \
            . 2>&1 | tee aider_output.log
        fi
        
        # Extract statistics from output
        FIXED_COUNT=$(grep -c "Fixed:" aider_output.log || echo "0")
        FAILED_COUNT=$(grep -c "Failed to fix:" aider_output.log || echo "0")
        
        echo "fixed_count=$FIXED_COUNT" >> $GITHUB_OUTPUT
        echo "failed_count=$FAILED_COUNT" >> $GITHUB_OUTPUT
    
    - name: Verify fixes
      id: verify
      run: |
        # Run linters to check remaining issues
        echo "## Remaining Issues After AI Fix" > remaining_issues.md
        echo "" >> remaining_issues.md
        
        # Check with ruff
        echo "### Ruff Issues" >> remaining_issues.md
        ruff check . --output-format=concise 2>&1 | head -20 >> remaining_issues.md || true
        
        # Check with flake8
        echo "### Flake8 Issues" >> remaining_issues.md
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics 2>&1 | head -20 >> remaining_issues.md || true
        
        # Count remaining issues
        REMAINING_RUFF=$(ruff check . --output-format=concise 2>&1 | grep -c "^" || echo "0")
        echo "remaining_count=$REMAINING_RUFF" >> $GITHUB_OUTPUT
    
    - name: Create Pull Request for AI fixes
      if: steps.aider_analysis.outputs.fixed_count != '0'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "🤖 Fix complex lint issues with Aider AI"
        title: "[AI] Fix complex lint issues with Aider"
        body: |
          ## 🤖 AI-Powered Lint Fixes
          
          This PR was automatically generated using Aider AI (powered by DeepSeek) to fix complex lint issues.
          
          ### 📊 Statistics
          - **Issues fixed by AI**: ${{ steps.aider_analysis.outputs.fixed_count }}
          - **Issues that failed to fix**: ${{ steps.aider_analysis.outputs.failed_count }}
          - **Remaining issues**: ${{ steps.verify.outputs.remaining_count }}
          
          ### 🔧 Fixed Issue Types
          - Loop control variables not used within loop body
          - Invalid module/function names
          - Complex import issues
          - Type comparison problems
          - Exception handling improvements
          - Star import resolutions
          - Undefined names and references
          
          ### ⚠️ Important
          **This PR requires careful review** as it contains AI-generated fixes that may affect program behavior.
          
          ### 🔍 Review Checklist
          - [ ] Review all AI-generated changes carefully
          - [ ] Ensure program logic is preserved
          - [ ] Run comprehensive tests
          - [ ] Check for any runtime issues
          - [ ] Verify performance is not impacted
          
          ### 📝 Session Details
          - **Model Used**: DeepSeek Coder
          - **Profile**: ${{ github.event.inputs.force_fix == 'true' && 'strict (force mode)' || 'basic (interactive)' }}
          - **Linters**: flake8, pylint, ruff
          
          ### 🔗 Resources
          - [Aider Lint Fixer](https://github.com/tosin2013/aider-lint-fixer)
          - [DeepSeek Coder](https://www.deepseek.com/)
          
          ---
          *Generated by the Aider lint fix workflow using DeepSeek AI*
        branch: auto-fix/aider-lint-fixes
        delete-branch: true
        labels: |
          automated
          lint-fix
          ai-generated
          needs-review
    
    - name: Upload session data
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: aider-session-${{ github.run_id }}
        path: |
          aider_output.log
          remaining_issues.md
          .aider*
        retention-days: 7

  create-issue-for-remaining:
    name: Create Issue for Remaining Problems
    runs-on: ubuntu-latest
    needs: [ruff-auto-fix, aider-lint-fix]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install ruff flake8 pylint
    
    - name: Generate comprehensive report
      id: generate_report
      run: |
        cat << 'EOF' > generate_report.py
        import subprocess
        import json
        from collections import defaultdict
        
        def get_ruff_issues():
            try:
                result = subprocess.run(['ruff', 'check', '.', '--output-format=json'], 
                                      capture_output=True, text=True)
                return json.loads(result.stdout) if result.stdout else []
            except:
                return []
        
        def create_markdown_report(issues):
            if not issues:
                return "## ✅ No Remaining Lint Issues!\n\nAll lint issues have been resolved."
            
            report = "## 🔍 Remaining Lint Issues\n\n"
            report += f"Total remaining issues: **{len(issues)}**\n\n"
            
            # Group by error code
            by_code = defaultdict(list)
            for issue in issues:
                code = issue.get('code', 'UNKNOWN')
                by_code[code].append(issue)
            
            report += "### Issues by Type\n\n"
            
            for code, code_issues in sorted(by_code.items(), key=lambda x: len(x[1]), reverse=True):
                report += f"#### {code} ({len(code_issues)} issues)\n\n"
                
                # Add description if available
                if code_issues:
                    first_issue = code_issues[0]
                    if 'message' in first_issue:
                        report += f"**Description**: {first_issue['message'].split(':')[0]}\n\n"
                
                report += "**Affected files**:\n"
                for issue in code_issues[:5]:  # Show first 5 examples
                    filename = issue.get('filename', '')
                    line = issue.get('location', {}).get('row', 0)
                    message = issue.get('message', '')
                    report += f"- `{filename}:{line}` - {message}\n"
                
                if len(code_issues) > 5:
                    report += f"- ...and {len(code_issues) - 5} more\n"
                report += "\n"
            
            report += "### Next Steps\n\n"
            report += "1. Review the remaining issues\n"
            report += "2. Manually fix critical issues\n"
            report += "3. Consider adjusting linter rules for false positives\n"
            report += "4. Re-run the workflow after fixes\n"
            
            return report
        
        # Generate report
        issues = get_ruff_issues()
        report = create_markdown_report(issues)
        
        with open('issue_report.md', 'w') as f:
            f.write(report)
        
        print(f"ISSUE_COUNT={len(issues)}")
        EOF
        
        python generate_report.py > output.txt 2>&1
        ISSUE_COUNT=$(grep "ISSUE_COUNT=" output.txt | cut -d= -f2 || echo "0")
        echo "issue_count=$ISSUE_COUNT" >> $GITHUB_OUTPUT
    
    - name: Create or Update Issue
      if: steps.generate_report.outputs.issue_count != '0'
      uses: peter-evans/create-issue-from-file@v4
      with:
        title: "[Lint] Remaining issues requiring manual intervention"
        content-filepath: ./issue_report.md
        labels: |
          lint
          help-wanted
          technical-debt