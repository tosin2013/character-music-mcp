name: Dagger Test Repair Agent

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types: [completed]
  check_run:
    types: [completed]
  workflow_dispatch:
    inputs:
      workflow_run_id:
        description: 'Workflow run ID to analyze'
        required: false
        type: string
      failure_type:
        description: 'Type of failure to focus on'
        required: false
        type: choice
        options:
          - 'all'
          - 'unit-tests'
          - 'integration-tests'
          - 'coverage'
          - 'documentation'
          - 'quality-checks'
          - 'security-scan'
        default: 'all'

permissions:
  contents: write
  pull-requests: write
  actions: read
  checks: read
  issues: write
  repository-projects: read

env:
  DAGGER_VERSION: "0.9.8"

jobs:
  detect-failures:
    name: Detect Test Failures
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'failure' || github.event.check_run.conclusion == 'failure' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 10
    
    outputs:
      has-failures: ${{ steps.detect.outputs.has-failures }}
      failure-types: ${{ steps.detect.outputs.failure-types }}
      workflow-run-id: ${{ steps.detect.outputs.workflow-run-id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Dagger
      uses: dagger/dagger-for-github@v5
      with:
        version: ${{ env.DAGGER_VERSION }}
        verb: call
        args: detect-failures --github-token env:GITHUB_TOKEN --repository ${{ github.repository }} --workflow-run-id ${{ github.event.workflow_run.id || inputs.workflow_run_id }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: detect
    
    - name: Output detection results
      run: |
        echo "Has failures: ${{ steps.detect.outputs.has-failures }}"
        echo "Failure types: ${{ steps.detect.outputs.failure-types }}"
        echo "Workflow run ID: ${{ steps.detect.outputs.workflow-run-id }}"

  analyze-and-fix:
    name: Analyze and Fix Failures
    runs-on: ubuntu-latest
    needs: detect-failures
    if: needs.detect-failures.outputs.has-failures == 'true'
    timeout-minutes: 30
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        failure-type: ${{ fromJson(needs.detect-failures.outputs.failure-types) }}
      fail-fast: false
      max-parallel: 3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Dagger
      uses: dagger/dagger-for-github@v5
      with:
        version: ${{ env.DAGGER_VERSION }}
        verb: call
        args: |
          analyze-and-fix-failure 
          --github-token env:GITHUB_TOKEN 
          --deepseek-api-key env:DEEPSEEK_API_KEY 
          --repository ${{ github.repository }} 
          --workflow-run-id ${{ needs.detect-failures.outputs.workflow-run-id }}
          --python-version ${{ matrix.python-version }}
          --failure-type ${{ matrix.failure-type }}
          --source .
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
      id: analyze-fix
    
    - name: Create Pull Request
      if: steps.analyze-fix.outputs.fix-generated == 'true'
      uses: dagger/dagger-for-github@v5
      with:
        version: ${{ env.DAGGER_VERSION }}
        verb: call
        args: |
          create-fix-pull-request
          --github-token env:GITHUB_TOKEN
          --repository ${{ github.repository }}
          --fix-data ${{ steps.analyze-fix.outputs.fix-data }}
          --source .
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: create-pr
    
    - name: Output results
      run: |
        echo "Fix generated: ${{ steps.analyze-fix.outputs.fix-generated }}"
        echo "Fix validation: ${{ steps.analyze-fix.outputs.fix-validation }}"
        if [ "${{ steps.create-pr.outputs.pr-created }}" == "true" ]; then
          echo "Pull request created: ${{ steps.create-pr.outputs.pr-url }}"
        fi

  validate-fixes:
    name: Validate Generated Fixes
    runs-on: ubuntu-latest
    needs: [detect-failures, analyze-and-fix]
    if: always() && needs.analyze-and-fix.result == 'success'
    timeout-minutes: 20
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Dagger
      uses: dagger/dagger-for-github@v5
      with:
        version: ${{ env.DAGGER_VERSION }}
        verb: call
        args: |
          validate-all-fixes
          --github-token env:GITHUB_TOKEN
          --repository ${{ github.repository }}
          --python-version ${{ matrix.python-version }}
          --source .
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: validate
    
    - name: Upload validation results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: validation-results-${{ matrix.python-version }}
        path: |
          validation_report_*.json
          test_results_*.xml
        retention-days: 7

  report-results:
    name: Report Agent Results
    runs-on: ubuntu-latest
    needs: [detect-failures, analyze-and-fix, validate-fixes]
    if: always()
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download validation results
      uses: actions/download-artifact@v4
      if: needs.validate-fixes.result != 'skipped'
    
    - name: Setup Dagger
      uses: dagger/dagger-for-github@v5
      with:
        version: ${{ env.DAGGER_VERSION }}
        verb: call
        args: |
          generate-agent-report
          --github-token env:GITHUB_TOKEN
          --repository ${{ github.repository }}
          --workflow-run-id ${{ needs.detect-failures.outputs.workflow-run-id }}
          --has-failures ${{ needs.detect-failures.outputs.has-failures }}
          --analyze-result ${{ needs.analyze-and-fix.result }}
          --validate-result ${{ needs.validate-fixes.result }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: report
    
    - name: Create summary comment
      if: steps.report.outputs.report-generated == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const report = `${{ steps.report.outputs.summary }}`;
          
          // Find the original workflow run
          const workflowRunId = ${{ needs.detect-failures.outputs.workflow-run-id }};
          
          if (workflowRunId) {
            // Create a comment on the original workflow run if possible
            // For now, we'll create an issue with the report
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Dagger Test Repair Agent Report - Run ${workflowRunId}`,
              body: report,
              labels: ['automated-agent', 'test-repair-report']
            });
          }
    
    - name: Upload agent report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: agent-report
        path: |
          agent_report_*.json
          agent_summary_*.md
        retention-days: 30

  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [detect-failures, analyze-and-fix, validate-fixes, report-results]
    if: always()
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Dagger
      uses: dagger/dagger-for-github@v5
      with:
        version: ${{ env.DAGGER_VERSION }}
        verb: call
        args: |
          cleanup-agent-resources
          --github-token env:GITHUB_TOKEN
          --repository ${{ github.repository }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true