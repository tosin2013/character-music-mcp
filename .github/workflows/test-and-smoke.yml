name: Test and Smoke Test MCP Server

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run smoke test daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      run_full_tests:
        description: 'Run full test suite (not just smoke test)'
        required: false
        default: 'false'
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -e ".[test]"

    - name: Run Smoke Test (Always)
      id: smoke_test
      run: |
        source venv/bin/activate
        python smoke_test.py
      continue-on-error: true

    - name: Upload Smoke Test Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: smoke-test-report-${{ matrix.python-version }}
        path: |
          smoke_test_report.txt
          smoke_test.log

    - name: Run Full Test Suite
      id: full_tests
      if: github.event.inputs.run_full_tests == 'true' || github.event_name == 'pull_request'
      run: |
        source venv/bin/activate
        python -m pytest tests/ -v \
          --tb=short \
          --junit-xml=pytest-results.xml \
          --cov=. \
          --cov-report=xml \
          --cov-report=html \
          --maxfail=10
      continue-on-error: true

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: steps.full_tests.outcome != 'skipped'
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-results.xml
          coverage.xml
          htmlcov/

    - name: Parse Test Results for Issues
      if: steps.full_tests.outcome == 'failure'
      id: parse_failures
      run: |
        source venv/bin/activate
        python .github/scripts/parse_test_failures.py pytest-results.xml
      continue-on-error: true

    - name: Create Issues for Test Failures
      if: steps.parse_failures.outcome == 'success' && github.event_name != 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read test failures if they exist
          if (fs.existsSync('test_failures.json')) {
            const failures = JSON.parse(fs.readFileSync('test_failures.json', 'utf8'));
            
            for (const failure of failures) {
              const title = `Test Failure: ${failure.test_name}`;
              const body = `## Test Failure Report
              
              **Test:** ${failure.test_name}
              **File:** ${failure.file_path}
              **Error:** ${failure.error_message}
              
              **Full Error Output:**
              \`\`\`
              ${failure.full_error}
              \`\`\`
              
              **Environment:**
              - Python: ${{ matrix.python-version }}
              - OS: ubuntu-latest
              - Commit: ${{ github.sha }}
              
              **Auto-generated by:** GitHub Actions Test Runner
              **Workflow:** ${context.workflow}
              **Run:** ${context.runNumber}`;
              
              // Check if issue already exists
              const existingIssues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: 'test-failure,automated'
              });
              
              const existingIssue = existingIssues.data.find(issue => 
                issue.title === title
              );
              
              if (!existingIssue) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: ['test-failure', 'automated', 'bug']
                });
                console.log(`Created issue for test failure: ${failure.test_name}`);
              } else {
                console.log(`Issue already exists for test failure: ${failure.test_name}`);
              }
            }
          }

    - name: Comment on PR with Test Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## ðŸ§ª Test Results\n\n';
          
          // Add smoke test results
          if (fs.existsSync('smoke_test_report.txt')) {
            const smokeReport = fs.readFileSync('smoke_test_report.txt', 'utf8');
            comment += '### Smoke Test Results\n';
            comment += '```\n' + smokeReport + '\n```\n\n';
          }
          
          // Add full test results if available
          if ('${{ steps.full_tests.outcome }}' !== 'skipped') {
            comment += '### Full Test Suite\n';
            comment += 'Status: ${{ steps.full_tests.outcome }}\n';
            
            if (fs.existsSync('test_failures.json')) {
              const failures = JSON.parse(fs.readFileSync('test_failures.json', 'utf8'));
              comment += `\n**Failed Tests:** ${failures.length}\n`;
              
              if (failures.length > 0) {
                comment += '\n**Sample Failures:**\n';
                failures.slice(0, 3).forEach(failure => {
                  comment += `- ${failure.test_name}: ${failure.error_message}\n`;
                });
                
                if (failures.length > 3) {
                  comment += `- ... and ${failures.length - 3} more\n`;
                }
              }
            }
          }
          
          comment += '\n---\n*Automated test report generated by GitHub Actions*';
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  create-smoke-test-issue:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.run_full_tests == 'false'
    
    steps:
    - name: Create Smoke Test Implementation Issue
      uses: actions/github-script@v7
      with:
        script: |
          const title = 'Implement Comprehensive Smoke Test for MCP Server';
          const body = `## Smoke Test Implementation

          This issue tracks the implementation of a comprehensive smoke test for the MCP server to ensure basic functionality for end users.

          ### Requirements
          - [ ] Test MCP server startup and basic functionality
          - [ ] Validate character analysis features
          - [ ] Test music persona generation
          - [ ] Verify Suno command creation
          - [ ] Test error handling and graceful degradation
          - [ ] Integration with GitHub Actions for automated testing

          ### Success Criteria
          - Smoke test runs successfully in CI/CD pipeline
          - Test covers core user-facing functionality
          - Results are reported clearly with confidence scores
          - Failed tests automatically create detailed GitHub issues

          ### Implementation Notes
          - Based on methodological pragmatism framework
          - Includes explicit confidence scoring for recommendations
          - Designed for both local development and CI/CD environments
          - Focuses on practical outcomes with systematic verification

          **Auto-generated by:** GitHub Actions Workflow
          **Triggered by:** Manual workflow dispatch`;

          // Check if issue already exists
          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'enhancement,testing'
          });

          const existingIssue = existingIssues.data.find(issue => 
            issue.title === title
          );

          if (!existingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['enhancement', 'testing', 'smoke-test', 'automated']
            });
            console.log('Created smoke test implementation issue');
          } else {
            console.log('Smoke test implementation issue already exists');
          }
