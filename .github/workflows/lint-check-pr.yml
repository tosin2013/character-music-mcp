name: Lint Check on PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint-check:
    name: Check Lint Issues
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install ruff flake8 pylint
        
        # Install project dependencies if they exist
        if [ -f "pyproject.toml" ]; then
          pip install -e . || true
        fi
    
    - name: Run Ruff check
      id: ruff_check
      run: |
        # Run ruff and capture results
        ruff check . --output-format=json > ruff_results.json 2>&1 || true
        ruff check . --output-format=concise > ruff_concise.txt 2>&1 || true
        
        # Count issues
        TOTAL_ISSUES=$(cat ruff_concise.txt | grep -c "^" || echo "0")
        FIXABLE_ISSUES=$(ruff check . --fix --diff 2>&1 | grep -c "^+" || echo "0")
        
        echo "total_issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
        echo "fixable_issues=$FIXABLE_ISSUES" >> $GITHUB_OUTPUT
        
        # Generate summary
        if [ "$TOTAL_ISSUES" -eq 0 ]; then
          echo "‚úÖ **No lint issues found!**" > ruff_summary.md
        else
          echo "## üîç Ruff Lint Check Results" > ruff_summary.md
          echo "" >> ruff_summary.md
          echo "Found **$TOTAL_ISSUES** lint issues (**$FIXABLE_ISSUES** auto-fixable)" >> ruff_summary.md
          echo "" >> ruff_summary.md
          
          # Add top issues
          echo "### Top Issues:" >> ruff_summary.md
          head -10 ruff_concise.txt >> ruff_summary.md
          
          if [ "$TOTAL_ISSUES" -gt 10 ]; then
            echo "" >> ruff_summary.md
            echo "...and $((TOTAL_ISSUES - 10)) more issues" >> ruff_summary.md
          fi
          
          echo "" >> ruff_summary.md
          echo "### üí° Quick Fix" >> ruff_summary.md
          echo "Run \`ruff check . --fix\` locally to auto-fix $FIXABLE_ISSUES issues" >> ruff_summary.md
        fi
    
    - name: Run Flake8 check
      id: flake8_check
      continue-on-error: true
      run: |
        # Run flake8 with basic checks
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics > flake8_critical.txt 2>&1 || true
        
        # Count critical issues
        CRITICAL_ISSUES=$(grep -c "^" flake8_critical.txt || echo "0")
        echo "critical_issues=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
        
        if [ "$CRITICAL_ISSUES" -gt 0 ]; then
          echo "" >> ruff_summary.md
          echo "### ‚ö†Ô∏è Critical Issues (Flake8)" >> ruff_summary.md
          echo "Found **$CRITICAL_ISSUES** critical issues that may cause runtime errors:" >> ruff_summary.md
          cat flake8_critical.txt >> ruff_summary.md
        fi
    
    - name: Comment PR with results
      if: always()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('ruff_summary.md', 'utf8');
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('üîç Ruff Lint Check Results')
          );
          
          const commentBody = `${summary}
          
          ---
          <details>
          <summary>üìö About this check</summary>
          
          This automated check helps maintain code quality by identifying:
          - Style violations
          - Potential bugs
          - Code smells
          - Performance issues
          
          To fix issues locally:
          \`\`\`bash
          # Auto-fix safe issues
          ruff check . --fix
          
          # Format code
          ruff format .
          
          # Check remaining issues
          ruff check .
          \`\`\`
          </details>
          
          *Generated by Lint Check workflow*`;
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody,
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody,
            });
          }
    
    - name: Set check status
      if: always()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const totalIssues = parseInt('${{ steps.ruff_check.outputs.total_issues }}') || 0;
          const criticalIssues = parseInt('${{ steps.flake8_check.outputs.critical_issues }}') || 0;
          
          let conclusion = 'success';
          let title = '‚úÖ No lint issues';
          let summary = 'All lint checks passed successfully.';
          
          if (criticalIssues > 0) {
            conclusion = 'failure';
            title = `‚ùå ${criticalIssues} critical issues found`;
            summary = `Found ${criticalIssues} critical issues that must be fixed.`;
          } else if (totalIssues > 100) {
            conclusion = 'failure';
            title = `‚ùå Too many lint issues (${totalIssues})`;
            summary = `Found ${totalIssues} lint issues. Please run auto-fix locally.`;
          } else if (totalIssues > 50) {
            conclusion = 'neutral';
            title = `‚ö†Ô∏è ${totalIssues} lint issues found`;
            summary = `Found ${totalIssues} lint issues. Consider running auto-fix.`;
          } else if (totalIssues > 0) {
            conclusion = 'neutral';
            title = `‚ÑπÔ∏è ${totalIssues} minor lint issues`;
            summary = `Found ${totalIssues} minor lint issues.`;
          }
          
          await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'Lint Check',
            head_sha: context.sha,
            status: 'completed',
            conclusion: conclusion,
            output: {
              title: title,
              summary: summary,
            },
          });

  suggest-ai-fix:
    name: Suggest AI Fix
    runs-on: ubuntu-latest
    needs: lint-check
    if: failure() || cancelled()
    
    steps:
    - name: Comment with AI fix suggestion
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const commentBody = `## ü§ñ Need help fixing these issues?
          
          You can use our automated AI-powered lint fixer to resolve complex issues:
          
          1. **Trigger the AI fix workflow**:
             - Go to [Actions tab](https://github.com/${context.repo.owner}/${context.repo.repo}/actions)
             - Select "Auto-Fix Lint Issues" workflow
             - Click "Run workflow"
             - Select this branch: \`${context.payload.pull_request.head.ref}\`
          
          2. **Local fix with Aider**:
             \`\`\`bash
             # Install aider-lint-fixer
             pip install aider-lint-fixer
             
             # Set your DeepSeek API key
             export DEEPSEEK_API_KEY="your-key-here"
             
             # Run the fixer
             aider-lint-fixer --linters ruff,flake8 --profile basic .
             \`\`\`
          
          3. **Manual fix**:
             - Review the lint issues above
             - Fix them manually in your code
             - Push the changes to update this PR
          
          ---
          üí° **Tip**: The AI-powered fixer can handle complex issues like:
          - Unused loop variables
          - Import organization
          - Type hints
          - Exception handling
          - Code style violations`;
          
          // Only post if there are significant issues
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const aiSuggestionExists = comments.some(comment => 
            comment.body.includes('ü§ñ Need help fixing these issues?')
          );
          
          if (!aiSuggestionExists) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody,
            });
          }